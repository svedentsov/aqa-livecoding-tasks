package com.svedentsov.aqa.tasks.algorithms;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.NullAndEmptySource;
import org.junit.jupiter.params.provider.ValueSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

@DisplayName("–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ \"—Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞\" üé´")
class LuckyTicketTest {

    private LuckyTicket luckyTicketChecker;

    @BeforeEach
    void setUp() {
        luckyTicketChecker = new LuckyTicket();
    }

    static Stream<Arguments> luckyTicketTestCases() {
        return Stream.of(
                Arguments.of("123402", true, "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –±–∏–ª–µ—Ç (6 == 6)"),
                Arguments.of("000000", true, "–í—Å–µ –Ω—É–ª–∏ (0 == 0)"),
                Arguments.of("11", true, "–î–≤–µ —Ü–∏—Ñ—Ä—ã, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π (1 == 1)"),
                Arguments.of("1010", true, "–ß–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π (1 == 1)"),
                Arguments.of("55", true, "–î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã (5 == 5)"),
                Arguments.of("987888", true, "–®–µ—Å—Ç—å —Ü–∏—Ñ—Ä, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π (24 == 24)"),
                Arguments.of("123456", false, "–ù–µ—Å—á–∞—Å—Ç–ª–∏–≤—ã–π –±–∏–ª–µ—Ç (6 != 15)"),
                Arguments.of("10", false, "–î–≤–µ —Ü–∏—Ñ—Ä—ã, –Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤—ã–π (1 != 0)"),
                Arguments.of("000001", false, "–ü–æ—á—Ç–∏ –≤—Å–µ –Ω—É–ª–∏, –Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤—ã–π (0 != 1)")
        );
    }

    @ParameterizedTest(name = "{2}: isLuckyTicket(\"{0}\") -> {1}")
    @MethodSource("luckyTicketTestCases")
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –∏ –Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤")
    void testLuckyAndUnluckyTickets(String ticketNumber, boolean expected, String description) {
        assertEquals(expected, luckyTicketChecker.isLuckyTicket(ticketNumber), description);
    }

    @ParameterizedTest(name = "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–µ—á–µ—Ç–Ω–∞—è –¥–ª–∏–Ω–∞): \"{0}\" -> false")
    @ValueSource(strings = {"123", "0", "98765"})
    @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å –Ω–µ—á–µ—Ç–Ω–æ–π –¥–ª–∏–Ω–æ–π")
    void isLuckyTicket_oddLength_shouldReturnFalse(String ticketNumber) {
        assertFalse(luckyTicketChecker.isLuckyTicket(ticketNumber), "–ù–µ—á–µ—Ç–Ω–∞—è –¥–ª–∏–Ω–∞");
    }

    @ParameterizedTest(name = "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–µ —Ü–∏—Ñ—Ä—ã): \"{0}\" -> false")
    @ValueSource(strings = {"1a3402", "12 34", "12-34", "+12345"})
    @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏")
    void isLuckyTicket_nonDigitCharacters_shouldReturnFalse(String ticketNumber) {
        assertFalse(luckyTicketChecker.isLuckyTicket(ticketNumber), "–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ü–∏—Ñ—Ä—ã");
    }

    @ParameterizedTest(name = "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (null –∏–ª–∏ –ø—É—Å—Ç–æ–π): \"{0}\" -> false")
    @NullAndEmptySource
    @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –¥–ª—è null –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏")
    void isLuckyTicket_nullOrEmpty_shouldReturnFalse(String ticketNumber) {
        // ticketNumber –±—É–¥–µ—Ç null, –∑–∞—Ç–µ–º "" –∏–∑-–∑–∞ @NullAndEmptySource
        assertFalse(luckyTicketChecker.isLuckyTicket(ticketNumber), "Null –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞");
    }
}
