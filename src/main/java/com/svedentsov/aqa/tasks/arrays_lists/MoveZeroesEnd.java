package com.svedentsov.aqa.tasks.arrays_lists;

/**
 * Решение задачи №45: Переместить все нули в конец массива.
 * <p>
 * Описание: Сохраняя относительный порядок ненулевых элементов.
 * (Проверяет: работа с массивами, два указателя, циклы)
 * <p>
 * Задание: Напишите метод `void moveZeroes(int[] nums)`, который перемещает
 * все нули в конец массива `nums`, сохраняя относительный порядок ненулевых
 * элементов. Модифицируйте массив "на месте".
 * <p>
 * Пример: `nums = [0, 1, 0, 3, 12]`. После `moveZeroes(nums)` массив
 * должен стать `[1, 3, 12, 0, 0]`.
 */
public class MoveZeroesEnd {

    /**
     * Перемещает все нули в конец массива {@code nums}, сохраняя относительный
     * порядок ненулевых элементов. Модификация происходит "на месте" (in-place).
     * Использует подход с одним указателем (`insertPos`), который отслеживает
     * позицию для вставки следующего ненулевого элемента.
     * <p>
     * Сложность: O(n) по времени (один проход по массиву), O(1) по памяти.
     *
     * @param nums Массив для модификации. Может быть null. Если null или длина <= 1,
     *             метод ничего не делает и просто возвращается.
     */
    public void moveZeroes(int[] nums) {
        // Проверка на null и тривиальные случаи (массив не требует изменений)
        if (nums == null || nums.length <= 1) {
            return;
        }

        int n = nums.length;
        int insertPos = 0; // Указатель на место для следующего ненулевого элемента

        // Шаг 1-3: Перемещаем ненулевые элементы в начало
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                // Если insertPos == i, это значит, что пока не было нулей
                // или они идут подряд в конце. Запись nums[i] в nums[insertPos]
                // просто перезапишет элемент самим собой.
                // Если insertPos < i, значит, были пропущены нули, и мы
                // перезаписываем ноль (или предыдущий ненулевой, если swap)
                // текущим ненулевым элементом.
                nums[insertPos] = nums[i];
                insertPos++; // Сдвигаем позицию для вставки
            }
        }

        // Шаг 5-6: Заполняем оставшуюся часть массива нулями
        // Все элементы от insertPos до конца должны стать нулями
        while (insertPos < n) {
            nums[insertPos] = 0;
            insertPos++;
        }
    }
}
