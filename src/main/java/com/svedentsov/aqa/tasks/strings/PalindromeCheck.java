package com.svedentsov.aqa.tasks.strings;

/**
 * Решение задачи №3: Проверка на палиндром.
 * <p>
 * Описание: Написать функцию, которая проверяет, является ли строка палиндромом
 * (читается одинаково слева направо и справа налево), игнорируя регистр и
 * не буквенно-цифровые символы. (Проверяет: работа со строками, циклы, условия)
 * <p>
 * Задание: Напишите метод `boolean isPalindrome(String str)`, который возвращает `true`,
 * если строка `str` является палиндромом (игнорируя регистр и не буквенно-цифровые символы),
 * и `false` в противном случае.
 * <p>
 * Пример: `isPalindrome("A man, a plan, a canal: Panama")` -> `true`,
 * `isPalindrome("race a car")` -> `false`, `isPalindrome(" ")` -> `true`.
 */
public class PalindromeCheck {

    /**
     * Проверяет, является ли строка палиндромом, игнорируя регистр и
     * все символы, кроме букв и цифр.
     * <p>
     * Алгоритм:
     * 1. Обработать случай с null (считается не палиндромом).
     * 2. Создать новую строку (или использовать StringBuilder), содержащую только
     * буквенно-цифровые символы исходной строки, приведенные к нижнему регистру.
     * 3. Сравнить символы очищенной строки с обоих концов, двигаясь к центру.
     * 4. Если все соответствующие пары символов совпадают, строка является палиндромом.
     * 5. Пустая строка или строка, которая становится пустой после очистки, считается палиндромом.
     *
     * @param str Входная строка для проверки. Может быть null.
     * @return {@code true}, если строка является палиндромом по указанным правилам,
     * {@code false} в противном случае.
     */
    public boolean isPalindrome(String str) {
        // Шаг 1: Обработка null
        if (str == null) {
            return false;
        }

        // Шаг 2: Очистка строки и приведение к нижнему регистру
        StringBuilder cleaned = new StringBuilder();
        for (char c : str.toCharArray()) {
            if (Character.isLetterOrDigit(c)) { // Проверяем, является ли символ буквой или цифрой
                cleaned.append(Character.toLowerCase(c)); // Добавляем в нижнем регистре
            }
        }
        String cleanedStr = cleaned.toString();

        // Шаг 3 & 4: Сравнение символов с двух концов
        int left = 0; // Указатель на начало очищенной строки
        int right = cleanedStr.length() - 1; // Указатель на конец очищенной строки

        while (left < right) { // Пока указатели не встретились или не пересеклись
            if (cleanedStr.charAt(left) != cleanedStr.charAt(right)) {
                return false; // Если символы на позициях left и right не совпадают, это не палиндром
            }
            // Сдвигаем указатели навстречу друг другу
            left++;
            right--;
        }
        // Шаг 5: Если цикл завершился без возврата false, значит, это палиндром
        // (включая случаи, когда очищенная строка пустая или содержит один символ)
        return true;
    }

    /**
     * Точка входа для демонстрации работы метода isPalindrome с различными примерами.
     *
     * @param args Аргументы командной строки (не используются).
     */
    public static void main(String[] args) {
        PalindromeCheck sol = new PalindromeCheck();

        // Массив тестовых строк
        String[] testStrings = {
                "A man, a plan, a canal: Panama", // Классический пример
                "race a car",                     // Не палиндром
                " ",                              // Строка из пробела (пустая после очистки)
                ",.",                             // Строка из не буквенно-цифровых символов (пустая после очистки)
                null,                             // Null значение
                "level",                          // Простой палиндром
                "",                               // Пустая строка
                "Noon",                           // Палиндром с разным регистром
                "Madam, I'm Adam.",               // Палиндром с пунктуацией и регистром
                "121",                            // Числовой палиндром
                "1a2",                            // Не палиндром (буквы/цифры)
                "Was it a car or a cat I saw?",   // Еще один сложный палиндром
                "hello",                          // Простое слово не палиндром
                "#(%)*",                          // Только не буквенно-цифровые
                "a",                              // Один символ
                "aba",                            // Простой палиндром
                "abc"                             // Простой не-палиндром
        };

        System.out.println("--- Тестирование isPalindrome ---");
        for (String test : testStrings) {
            // Используем printf для аккуратного вывода: входная строка (в кавычках для null) и результат
            System.out.printf("Input: %s -> isPalindrome: %b%n",
                    (test == null ? "null" : "\"" + test + "\""), // Отображаем null как "null"
                    sol.isPalindrome(test));
        }
    }
}
