package com.svedentsov.aqa.tasks.algorithms;

/**
 * Решение задачи №37: Найти наименьшее общее кратное (НОК / LCM).
 * Описание: Написать функцию для нахождения НОК двух чисел.
 * (Проверяет: НОД, арифметика)
 * Задание: Напишите метод `long lcm(int a, int b)`, который вычисляет наименьшее
 * общее кратное двух целых чисел `a` и `b`. Можно использовать формулу
 * `lcm(a, b) = (|a * b|) / gcd(a, b)`. Обработайте нули и возможные переполнения.
 * Возвращайте `long`, т.к. НОК может легко превысить `Integer.MAX_VALUE`.
 * Пример: `lcm(4, 6)` -> `12`. `lcm(5, 7)` -> `35`. `lcm(0, 5)` -> `0`.
 */
public class LCM {

    /**
     * Вычисляет наименьшее общее кратное (НОК) двух целых чисел a и b.
     * Использует формулу: НОК(a, b) = (|a| / НОД(a, b)) * |b|.
     * Эта форма записи предпочтительнее, чем (|a*b|)/НОД, так как она
     * уменьшает риск переполнения на промежуточном этапе умножения.
     * Обрабатывает случаи с нулями (НОК(a, 0) = 0).
     * Использует тип long для вычислений и результата, чтобы избежать переполнения.
     *
     * @param a Первое целое число.
     * @param b Второе целое число.
     * @return Наименьшее общее кратное чисел a и b (тип long). Возвращает 0L, если одно из чисел 0.
     */
    public long lcm(int a, int b) {
        // НОК с нулем всегда равен нулю по определению
        if (a == 0 || b == 0) {
            return 0L;
        }

        // Вычисляем НОД абсолютных значений
        int greatestCommonDivisor = gcd(a, b);
        // НОД(a, b) не может быть 0, если a и b не оба 0 (этот случай обработан выше)

        // Вычисляем НОК по формуле (|a| / НОД(a, b)) * |b|
        // Используем long для промежуточных вычислений и результата
        long valA = Math.abs((long) a);
        long valB = Math.abs((long) b);

        // Деление выполняется до умножения, чтобы уменьшить промежуточные значения
        // greatestCommonDivisor гарантированно > 0 здесь
        return (valA / greatestCommonDivisor) * valB;
    }

    /**
     * Вспомогательный метод для вычисления НОД (Наибольший Общий Делитель).
     * Используется итеративный алгоритм Евклида.
     * Используется методом lcm. Приватный, т.к. является деталью реализации lcm.
     *
     * @param a Первое целое число.
     * @param b Второе целое число.
     * @return НОД чисел |a| и |b|.
     */
    private int gcd(int a, int b) {
        // Используем long промежуточно на случай a = Integer.MIN_VALUE
        long la = Math.abs((long) a);
        long lb = Math.abs((long) b);
        while (lb != 0) {
            long temp = lb;
            lb = la % lb;
            la = temp;
        }
        // Результат НОД гарантированно умещается в int, если a и b были int
        return (int) la;
    }
}
