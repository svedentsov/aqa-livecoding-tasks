package com.svedentsov.aqa.tasks.algorithms;

/**
 * Решение задачи №49: Проверка на идеальное число.
 * Описание: Проверить, равно ли число сумме своих собственных делителей.
 * (Проверяет: циклы, арифметика)
 * Задание: Напишите метод `boolean isPerfectNumber(int num)`, который проверяет,
 * является ли положительное целое число `num` идеальным числом (число, равное
 * сумме своих собственных положительных делителей, т.е. делителей, исключая само число).
 * Пример: `isPerfectNumber(6)` -> `true` (1 + 2 + 3 = 6).
 * `isPerfectNumber(28)` -> `true` (1 + 2 + 4 + 7 + 14 = 28).
 * `isPerfectNumber(7)` -> `false`.
 */
public class PerfectNumberCheck {

    /**
     * Проверяет, является ли заданное положительное целое число идеальным.
     * Идеальное число - это положительное целое число, которое равно сумме
     * своих собственных положительных делителей (делителей, исключая само число).
     *
     * @param num Число для проверки. Должно быть положительным.
     * @return {@code true}, если число идеальное, {@code false} в противном случае.
     */
    public boolean isPerfectNumber(int num) {
        // Шаг 1: Идеальные числа по определению положительны и > 1.
        // Сумма собственных делителей 1 равна 0, поэтому 1 не идеальное.
        if (num <= 1) {
            return false;
        }

        // Шаг 2: Инициализация суммы (1 уже учтена как делитель)
        long sumOfProperDivisors = 1L; // Используем long для суммы на случай больших чисел

        // Шаг 3 & 4: Поиск и суммирование делителей до sqrt(num)
        // Используем long для i*i для предотвращения переполнения квадрата i
        for (long i = 2; i * i <= num; i++) {
            if (num % i == 0) {
                // i является делителем
                sumOfProperDivisors += i;

                // Проверяем парный делитель num / i
                long pairDivisor = num / i;
                // Добавляем парный делитель, только если он не равен i
                // (т.е. если num не является полным квадратом i*i)
                if (i != pairDivisor) {
                    sumOfProperDivisors += pairDivisor;
                }
            }
            // Шаг 5: Оптимизация - если сумма уже больше числа, выходим
            // Эта проверка должна быть внутри цикла, чтобы иметь эффект.
            if (sumOfProperDivisors > num) {
                return false; // Оптимизация: если сумма уже превысила, дальше нет смысла считать
            }
        }

        // Шаг 6: Финальное сравнение суммы с числом
        return sumOfProperDivisors == num;
    }
}
