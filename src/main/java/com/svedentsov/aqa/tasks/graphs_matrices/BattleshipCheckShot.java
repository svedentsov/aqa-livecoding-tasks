package com.svedentsov.aqa.tasks.graphs_matrices;

/**
 * Решение задачи №83: Морской бой - проверка попадания.
 * Описание: Дана матрица поля, проверить корректность выстрела/попадания.
 * (Проверяет: работа с 2D массивами, условия)
 * Задание: Дана 2D матрица `int[][] field`, представляющая поле для игры
 * в морской бой (0 - пусто, 1 - часть корабля). Напишите метод
 * `String checkShot(int row, int col)` который возвращает "Miss" если `field[row][col] == 0`,
 * и "Hit" если `field[row][col] == 1`.
 * Добавлена обработка некорректных координат и состояния поля.
 */
public class BattleshipCheckShot {

    /**
     * Проверяет результат выстрела по координатам (row, col) на игровом поле Морского боя.
     *
     * @param field Игровое поле, представленное 2D массивом целых чисел.
     *              Ожидаемые значения: 0 - вода, 1 - корабль.
     *              Другие значения интерпретируются как уже обстрелянные клетки.
     * @param row   Координата строки выстрела (нумерация с 0).
     * @param col   Координата столбца выстрела (нумерация с 0).
     * @return Строка, описывающая результат: "Miss", "Hit", "Already Hit/Missed",
     * "Invalid Coordinates", "Invalid Field".
     */
    public String checkShot(int[][] field, int row, int col) {
        // 1. Проверка валидности игрового поля
        // Обрабатывает: поле равно null, поле не содержит строк, первая строка равна null, первая строка пуста.
        if (field == null || field.length == 0 || field[0] == null || field[0].length == 0) {
            return "Invalid Field";
        }
        // Примечание: Не проверяет "рваные" массивы далее первой строки.
        // Предполагается, что field[0].length определяет количество столбцов для проверки координат.

        int rows = field.length;
        int cols = field[0].length; // Количество столбцов, основанное на первой строке

        // 2. Проверка валидности координат
        if (row < 0 || row >= rows || col < 0 || col >= cols) {
            return "Invalid Coordinates";
        }

        // Проверка на возможный NullPointerException при "рваном" массиве и field[row] == null
        if (field[row] == null) {
            return "Invalid Field"; // Или можно обработать как специальную ошибку "null строка"
        }
        // Проверка, что строка короче ожидаемой длины (в случае "рваного" массива)
        if (col >= field[row].length) {
            return "Invalid Coordinates"; // Индекс столбца выходит за границы конкретной строки
        }

        // 3. Определение результата в зависимости от значения в ячейке
        int cellValue = field[row][col];
        return switch (cellValue) {
            case 0 -> "Miss";
            case 1 -> "Hit";
            default ->
                // Любое другое значение считается повторным выстрелом
                // или уже обстрелянной ячейкой
                    "Already Hit/Missed";
        };
    }
}
