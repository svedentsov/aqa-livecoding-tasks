package com.svedentsov.aqa.tasks.oop_design;

/**
 * Решение задачи №14: Поменять местами две переменные без использования третьей.
 * <p>
 * Описание: Написать код для обмена значениями двух числовых переменных.
 * (Проверяет: арифметика/битовые операции)
 * <p>
 * Задание: Дан код: `int a = 5; int b = 10;`. Напишите код, который меняет
 * значения `a` и `b` местами, не используя дополнительную переменную.
 * <p>
 * Пример: После выполнения кода `a` должно стать `10`, а `b` должно стать `5`.
 * <p>
 * Примечание: Методы ниже демонстрируют алгоритмы обмена. Они возвращают
 * результат применения алгоритма, так как Java передает примитивы по значению,
 * и сами методы не могут изменить переменные в вызывающем коде.
 */
public class SwapVariables {

    /**
     * Применяет алгоритм обмена к двум значениям с использованием
     * арифметических операций и возвращает результат.
     * Внимание: Промежуточные шаги могут вызвать переполнение для граничных
     * значений int, но конечный результат для этой последовательности операций
     * в Java (с циклическим переполнением) будет корректным.
     *
     * @param a Исходное значение 'a'.
     * @param b Исходное значение 'b'.
     * @return Массив int[]{новое_a, новое_b}, где новое_a = исходное_b, новое_b = исходное_a.
     */
    public int[] swapUsingArithmetic(int a, int b) {
        // Эта последовательность (+, -, -) работает корректно даже при переполнении int в Java
        a = a + b; // Шаг 1: a = a + b (Может переполниться)
        b = a - b; // Шаг 2: b = (a_old + b_old) - b_old = a_old (С учетом возможного переполнения на шаге 1)
        a = a - b; // Шаг 3: a = (a_old + b_old) - a_old = b_old (С учетом возможного переполнения на шаге 1)
        return new int[]{a, b};
    }

    /**
     * Применяет алгоритм обмена к двум значениям с использованием
     * побитовой операции XOR (^).
     * Этот метод безопасен от переполнения.
     *
     * @param a Исходное значение 'a'.
     * @param b Исходное значение 'b'.
     * @return Массив int[]{новое_a, новое_b}, где новое_a = исходное_b, новое_b = исходное_a.
     */
    public int[] swapUsingXor(int a, int b) {
        a = a ^ b; // Шаг 1: a = a XOR b
        b = a ^ b; // Шаг 2: b = (a_old XOR b_old) XOR b_old = a_old
        a = a ^ b; // Шаг 3: a = (a_old XOR b_old) XOR a_old = b_old
        return new int[]{a, b};
    }
}
